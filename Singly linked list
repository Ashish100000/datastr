Write a program to implement singly linked list as an ADT that supports the following operations:
i. Insert an element x at the beginning of the singly linked list

#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int data) {
        this->data = data;
        this->next = NULL;
    }
};
void insertAtPosition(Node*& head, int position, int x) {
    if (position < 1) {
        cout << "Invalid position. Position should be greater than or equal to 1." << endl;
        return;
    }

    Node* newNode = new Node(x);

    if (position == 1) {
        newNode->next = head;
        head = newNode;
        return;
    }

    Node* temp = head;
    for (int i = 1; i < position - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        cout << "Position exceeds the length of the list. Element not inserted." << endl;
        delete newNode; // Free the allocated memory for the new node
        return;
    }

    newNode->next = temp->next;
    temp->next = newNode;
}


void removeAtPosition(Node*& head, int position) {
    if (position < 1) {
        cout << "Invalid position. Position should be greater than or equal to 1." << endl;
        return;
    }

    if (head == NULL) {
        cout << "List is empty. Cannot remove element." << endl;
        return;
    }

    if (position == 1) {
        Node* temp = head;
        head = head->next;
        delete temp;
        return;
    }

    Node* temp = head;
    for (int i = 1; i < position - 1 && temp != NULL; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) {
        cout << "Position exceeds the length of the list. Element not removed." << endl;
        return;
    }

    Node* nodeToRemove = temp->next;
    temp->next = nodeToRemove->next;
    delete nodeToRemove;
}

// searching element in SLL

Node* searchElement(Node* head, int x) {
    Node* temp = head;

    while (temp != NULL) {
        if (temp->data == x) {
            // Element found, return the node itself
            return temp;
        }
        temp = temp->next;
    }

    // Element not found, return NULL
    return NULL;
}


// remove the element from the begining of SLL

void removeFromBeginning(Node*& head) {
    if (head == NULL) {
        cout << "List is empty. Cannot remove from an empty list." << endl;
        return;
    }

    Node* temp = head;
    head = temp->next;
    delete temp;
}

void print(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int main() {
    Node* newNode1 = new Node(5);
    Node* newNode2 = new Node(10);
    Node* newNode3 = new Node(12);

    newNode1->next = newNode2;
    newNode2->next = newNode3;

    Node* head = newNode1;
    cout << "Original Linked List: ";
    print(head);
  
    insertAtPosition(head,2,55);
    print(head);
    
    insertAtPosition(head,1,63);
    print(head);
    
    removeAtPosition(head,1);
    print(head);

    int elementToSearch = 10;
    Node* result = searchElement(head, elementToSearch);

    if (result != NULL) {
        cout << "Element " << elementToSearch << " found in the list." << endl;
    } else {
        cout << "Element " << elementToSearch << " not found in the list." << endl;
    }

    removeFromBeginning(head);
    cout << "Singly Linked List after removing from the beginning: ";
    print(head);
    return 0;
}
