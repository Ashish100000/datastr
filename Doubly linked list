//(i) Insert an element x at the beginning of the doubly linked list
//(ii) Insert an element x at the end of the doubly linked list
//(iii). Remove an element from the beginning of the doubly linked list
//(iv). Remove an element from the end of the doubly linked list

#include<iostream>
using namespace std ;
 class Node{
 	public:
 	int data;
 	Node* prev;
 	Node* next ;
 	
 	Node(int data){
 		this->data= data;
 		this->prev= NULL;
 		this->next= NULL;		
	 }
 };
 
 void print(Node* &head ){
 	Node* temp = head ;
 	while(temp!=NULL){
 		cout<< temp->data<<"  ";
 		temp=temp->next;		
	 }
	 cout<<endl;
 }
 
 void insertAtHead(Node* &head , int d ){
 	Node* temp2 = new Node(d);
 	temp2->next = head ;
 	head->prev = temp2;
 	head =  temp2;
 }
 
 void insertAtTail(Node* &tail, int d2 ){
 	Node* temp2 = new Node(d2);
 	tail->next= temp2;
 	temp2->prev = tail;
 	tail = temp2;	
 }
 
 void removeFromBeginning(Node* &head) {
    if (head == NULL) {
        cout << "List is empty. Cannot remove from an empty list." << endl;
        return;
    }

    Node* temp = head;
    head = head->next;

    if (head != NULL) {
        head->prev = NULL;
    }

    delete temp;
}

void removeFromEnd(Node* &tail) {
    if (tail == NULL) {
        cout << "List is empty. Cannot remove from an empty list." << endl;
        return;
    }

    Node* temp = tail;

    if (tail->prev != NULL) {
        tail = tail->prev;
        tail->next = NULL;
    } else {
        // Only one element in the list
        tail = NULL;
    }

    delete temp;
}
 int main(){
 	Node* node1= new Node(12);
 	Node* node2 = new Node(11);
 	node1->next = node2;
 	Node* head = node1;
 	print(head);
 	
 	insertAtHead(head , 22);
 	print(head);
 	
 	Node* tail = node2;
 	
 	insertAtTail(tail, 55);
 	print(head);
 	
 	removeFromBeginning(head);

    cout << "Doubly Linked List after removing from the beginning: ";
    print(head);
    
    removeFromEnd(tail);

    cout << "Doubly Linked List after removing from the end: ";
    print(head);
 	
 }
 }
